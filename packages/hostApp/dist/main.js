(() => {
    "use strict";
    var e, r, t, o, n, a, i, u, l, f, p, s = {
        614: (e, r, t) => {
            t.r(r), t.d(r, {default: () => o});
            var o = function (e, r) {
                return e + r
            }
        }, 138: (e, r, t) => {
            var o = t(343), n = t.n(o);
            document.body.appendChild(function () {
                const e = document.createElement("div"), r = n()(2, 2);
                return e.innerHTML = ["Hello", "this", "is", "host", "app"].join(" ") + " " + r, e
            }()), (() => {
                const e = document.createElement("script");
                e.src = "http://localhost:3002/remoteEntry.js", e.type = "text/javascript", e.async = !0, e.onerror = () => {
                    console.log("load remote error")
                }, e.onload = () => {
                    console.log("load remote finished"), (async () => {
                        await t.I("default");
                        const e = window.remoteApp;
                        await e.init(t.S.default), (await window.remoteApp.get("./Widget"))()
                    })()
                }, document.head.appendChild(e)
            })()
        }
    }, d = {};

    function c(e) {
        var r = d[e];
        if (void 0 !== r) return r.exports;
        var t = d[e] = {exports: {}};
        return s[e](t, t.exports, c), t.exports
    }

    c.m = s, c.c = d, c.n = e => {
        var r = e && e.__esModule ? () => e.default : () => e;
        return c.d(r, {a: r}), r
    }, c.d = (e, r) => {
        for (var t in r) c.o(r, t) && !c.o(e, t) && Object.defineProperty(e, t, {enumerable: !0, get: r[t]})
    }, c.o = (e, r) => Object.prototype.hasOwnProperty.call(e, r), c.r = e => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {value: "Module"}), Object.defineProperty(e, "__esModule", {value: !0})
    }, (() => {
        c.S = {};
        var e = {}, r = {};
        c.I = (t, o) => {
            o || (o = []);
            var n = r[t];
            if (n || (n = r[t] = {}), !(o.indexOf(n) >= 0)) {
                if (o.push(n), e[t]) return e[t];
                c.o(c.S, t) || (c.S[t] = {});
                var a = c.S[t], i = "@mfe-study/hostApp", u = [];
                return "default" === t && ((e, r, t, o) => {
                    var n = a[e] = a[e] || {}, u = n[r];
                    (!u || !u.loaded && (0 != !u.eager || i > u.from)) && (n[r] = {
                        get: () => () => c(614),
                        from: i,
                        eager: !0
                    })
                })("jason-mfe-lib", "0.0.1-alpha0"), e[t] = u.length ? Promise.all(u).then((() => e[t] = 1)) : 1
            }
        }
    })(), e = e => {
        var r = e => e.split(".").map((e => +e == e ? +e : e)), t = /^([^-+]+)?(?:-([^+]+))?(?:\+(.+))?$/.exec(e),
            o = t[1] ? r(t[1]) : [];
        return t[2] && (o.length++, o.push.apply(o, r(t[2]))), t[3] && (o.push([]), o.push.apply(o, r(t[3]))), o
    }, r = (r, t) => {
        r = e(r), t = e(t);
        for (var o = 0; ;) {
            if (o >= r.length) return o < t.length && "u" != (typeof t[o])[0];
            var n = r[o], a = (typeof n)[0];
            if (o >= t.length) return "u" == a;
            var i = t[o], u = (typeof i)[0];
            if (a != u) return "o" == a && "n" == u || "s" == u || "u" == a;
            if ("o" != a && "u" != a && n != i) return n < i;
            o++
        }
    }, t = e => {
        var r = e[0], o = "";
        if (1 === e.length) return "*";
        if (r + .5) {
            o += 0 == r ? ">=" : -1 == r ? "<" : 1 == r ? "^" : 2 == r ? "~" : r > 0 ? "=" : "!=";
            for (var n = 1, a = 1; a < e.length; a++) n--, o += "u" == (typeof (u = e[a]))[0] ? "-" : (n > 0 ? "." : "") + (n = 2, u);
            return o
        }
        var i = [];
        for (a = 1; a < e.length; a++) {
            var u = e[a];
            i.push(0 === u ? "not(" + l() + ")" : 1 === u ? "(" + l() + " || " + l() + ")" : 2 === u ? i.pop() + " " + i.pop() : t(u))
        }
        return l();

        function l() {
            return i.pop().replace(/^\((.+)\)$/, "$1")
        }
    }, o = (r, t) => {
        if (0 in r) {
            t = e(t);
            var n = r[0], a = n < 0;
            a && (n = -n - 1);
            for (var i = 0, u = 1, l = !0; ; u++, i++) {
                var f, p, s = u < r.length ? (typeof r[u])[0] : "";
                if (i >= t.length || "o" == (p = (typeof (f = t[i]))[0])) return !l || ("u" == s ? u > n && !a : "" == s != a);
                if ("u" == p) {
                    if (!l || "u" != s) return !1
                } else if (l) if (s == p) if (u <= n) {
                    if (f != r[u]) return !1
                } else {
                    if (a ? f > r[u] : f < r[u]) return !1;
                    f != r[u] && (l = !1)
                } else if ("s" != s && "n" != s) {
                    if (a || u <= n) return !1;
                    l = !1, u--
                } else {
                    if (u <= n || p < s != a) return !1;
                    l = !1
                } else "s" != s && "n" != s && (l = !1, u--)
            }
        }
        var d = [], c = d.pop.bind(d);
        for (i = 1; i < r.length; i++) {
            var h = r[i];
            d.push(1 == h ? c() | c() : 2 == h ? c() & c() : h ? o(h, t) : !c())
        }
        return !!c()
    }, n = (e, t) => {
        var o = e[t];
        return Object.keys(o).reduce(((e, t) => !e || !o[e].loaded && r(e, t) ? t : e), 0)
    }, a = (e, r, o, n) => "Unsatisfied version " + o + " from " + (o && e[r][o].from) + " of shared singleton module " + r + " (required " + t(n) + ")", i = (e, r, t, i) => {
        var l = n(e, t);
        return o(i, l) || "undefined" != typeof console && console.warn && console.warn(a(e, t, l, i)), u(e[t][l])
    }, u = e => (e.loaded = 1, e.get()), l = (e => function (r, t, o, n) {
        var a = c.I(r);
        return a && a.then ? a.then(e.bind(e, r, c.S[r], t, o, n)) : e(0, c.S[r], t, o, n)
    })(((e, r, t, o, n) => r && c.o(r, t) ? i(r, 0, t, o) : n())), f = {}, p = {343: () => l("default", "jason-mfe-lib", [3, 0, 0, 1, , "alpha0"], (() => () => c(614)))}, [343].forEach((e => {
        c.m[e] = r => {
            f[e] = 0, delete c.c[e];
            var t = p[e]();
            if ("function" != typeof t) throw new Error("Shared module is not available for eager consumption: " + e);
            r.exports = t()
        }
    })), c(138)
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dEIsR0FDcEM3QyxFQUFvQm1FLEVBQU9tQyxFQUFXekQsRUFBS3lCLEdBRE1xQyxNQVdyRHhHLEVBQW1CLEdBQ25CQyxFQUF5QixDQUM1QixJQUFLLElBQU9GLEVBQWtDLFVBQVcsZ0JBQWlCLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLFdBQVcsSUFBTSxJQUFRNEIsRUFBb0IsUUFFNUcsQ0FBQyxLQUNQOEUsU0FBU0MsSUFDeEIvRSxFQUFvQk8sRUFBRXdFLEdBQU8xRSxJQUU1QmhDLEVBQWlCMEcsR0FBTSxTQUNoQi9FLEVBQW9CUSxFQUFFdUUsR0FDN0IsSUFBSXRDLEVBQVVuRSxFQUF1QnlHLEtBQ3JDLEdBQXNCLG1CQUFadEMsRUFBd0IsTUFBTSxJQUFJdUMsTUFBTSx5REFBMkRELEdBQzdHMUUsRUFBT0QsUUFBVXFDLFFTNUlPekMsRUFBb0IsTSIsInNvdXJjZXMiOlsid2VicGFjazovL0BtZmUtc3R1ZHkvaG9zdEFwcC93ZWJwYWNrL3J1bnRpbWUvY29uc3VtZXMiLCJ3ZWJwYWNrOi8vQG1mZS1zdHVkeS9ob3N0QXBwLy4vbm9kZV9tb2R1bGVzL2phc29uLW1mZS1saWIvbGliL2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly9AbWZlLXN0dWR5L2hvc3RBcHAvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQG1mZS1zdHVkeS9ob3N0QXBwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0BtZmUtc3R1ZHkvaG9zdEFwcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9AbWZlLXN0dWR5L2hvc3RBcHAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0BtZmUtc3R1ZHkvaG9zdEFwcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL0BtZmUtc3R1ZHkvaG9zdEFwcC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0BtZmUtc3R1ZHkvaG9zdEFwcC93ZWJwYWNrL3J1bnRpbWUvc2hhcmluZyIsIndlYnBhY2s6Ly9AbWZlLXN0dWR5L2hvc3RBcHAvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBwYXJzZVZlcnNpb24gPSAoc3RyKSA9PiB7XG5cdC8vIHNlZSB3ZWJwYWNrL2xpYi91dGlsL3NlbXZlci5qcyBmb3Igb3JpZ2luYWwgY29kZVxuXHR2YXIgcD1wPT57cmV0dXJuIHAuc3BsaXQoXCIuXCIpLm1hcCgocD0+e3JldHVybitwPT1wPytwOnB9KSl9LG49L14oW14tK10rKT8oPzotKFteK10rKSk/KD86XFwrKC4rKSk/JC8uZXhlYyhzdHIpLHI9blsxXT9wKG5bMV0pOltdO3JldHVybiBuWzJdJiYoci5sZW5ndGgrKyxyLnB1c2guYXBwbHkocixwKG5bMl0pKSksblszXSYmKHIucHVzaChbXSksci5wdXNoLmFwcGx5KHIscChuWzNdKSkpLHI7XG59XG52YXIgdmVyc2lvbkx0ID0gKGEsIGIpID0+IHtcblx0Ly8gc2VlIHdlYnBhY2svbGliL3V0aWwvc2VtdmVyLmpzIGZvciBvcmlnaW5hbCBjb2RlXG5cdGE9cGFyc2VWZXJzaW9uKGEpLGI9cGFyc2VWZXJzaW9uKGIpO2Zvcih2YXIgcj0wOzspe2lmKHI+PWEubGVuZ3RoKXJldHVybiByPGIubGVuZ3RoJiZcInVcIiE9KHR5cGVvZiBiW3JdKVswXTt2YXIgZT1hW3JdLG49KHR5cGVvZiBlKVswXTtpZihyPj1iLmxlbmd0aClyZXR1cm5cInVcIj09bjt2YXIgdD1iW3JdLGY9KHR5cGVvZiB0KVswXTtpZihuIT1mKXJldHVyblwib1wiPT1uJiZcIm5cIj09Znx8KFwic1wiPT1mfHxcInVcIj09bik7aWYoXCJvXCIhPW4mJlwidVwiIT1uJiZlIT10KXJldHVybiBlPHQ7cisrfVxufVxudmFyIHJhbmdlVG9TdHJpbmcgPSAocmFuZ2UpID0+IHtcblx0Ly8gc2VlIHdlYnBhY2svbGliL3V0aWwvc2VtdmVyLmpzIGZvciBvcmlnaW5hbCBjb2RlXG5cdHZhciByPXJhbmdlWzBdLG49XCJcIjtpZigxPT09cmFuZ2UubGVuZ3RoKXJldHVyblwiKlwiO2lmKHIrLjUpe24rPTA9PXI/XCI+PVwiOi0xPT1yP1wiPFwiOjE9PXI/XCJeXCI6Mj09cj9cIn5cIjpyPjA/XCI9XCI6XCIhPVwiO2Zvcih2YXIgZT0xLGE9MTthPHJhbmdlLmxlbmd0aDthKyspe2UtLSxuKz1cInVcIj09KHR5cGVvZih0PXJhbmdlW2FdKSlbMF0/XCItXCI6KGU+MD9cIi5cIjpcIlwiKSsoZT0yLHQpfXJldHVybiBufXZhciBnPVtdO2ZvcihhPTE7YTxyYW5nZS5sZW5ndGg7YSsrKXt2YXIgdD1yYW5nZVthXTtnLnB1c2goMD09PXQ/XCJub3QoXCIrbygpK1wiKVwiOjE9PT10P1wiKFwiK28oKStcIiB8fCBcIitvKCkrXCIpXCI6Mj09PXQ/Zy5wb3AoKStcIiBcIitnLnBvcCgpOnJhbmdlVG9TdHJpbmcodCkpfXJldHVybiBvKCk7ZnVuY3Rpb24gbygpe3JldHVybiBnLnBvcCgpLnJlcGxhY2UoL15cXCgoLispXFwpJC8sXCIkMVwiKX1cbn1cbnZhciBzYXRpc2Z5ID0gKHJhbmdlLCB2ZXJzaW9uKSA9PiB7XG5cdC8vIHNlZSB3ZWJwYWNrL2xpYi91dGlsL3NlbXZlci5qcyBmb3Igb3JpZ2luYWwgY29kZVxuXHRpZigwIGluIHJhbmdlKXt2ZXJzaW9uPXBhcnNlVmVyc2lvbih2ZXJzaW9uKTt2YXIgZT1yYW5nZVswXSxyPWU8MDtyJiYoZT0tZS0xKTtmb3IodmFyIG49MCxpPTEsYT0hMDs7aSsrLG4rKyl7dmFyIGYscyxnPWk8cmFuZ2UubGVuZ3RoPyh0eXBlb2YgcmFuZ2VbaV0pWzBdOlwiXCI7aWYobj49dmVyc2lvbi5sZW5ndGh8fFwib1wiPT0ocz0odHlwZW9mKGY9dmVyc2lvbltuXSkpWzBdKSlyZXR1cm4hYXx8KFwidVwiPT1nP2k+ZSYmIXI6XCJcIj09ZyE9cik7aWYoXCJ1XCI9PXMpe2lmKCFhfHxcInVcIiE9ZylyZXR1cm4hMX1lbHNlIGlmKGEpaWYoZz09cylpZihpPD1lKXtpZihmIT1yYW5nZVtpXSlyZXR1cm4hMX1lbHNle2lmKHI/Zj5yYW5nZVtpXTpmPHJhbmdlW2ldKXJldHVybiExO2YhPXJhbmdlW2ldJiYoYT0hMSl9ZWxzZSBpZihcInNcIiE9ZyYmXCJuXCIhPWcpe2lmKHJ8fGk8PWUpcmV0dXJuITE7YT0hMSxpLS19ZWxzZXtpZihpPD1lfHxzPGchPXIpcmV0dXJuITE7YT0hMX1lbHNlXCJzXCIhPWcmJlwiblwiIT1nJiYoYT0hMSxpLS0pfX12YXIgdD1bXSxvPXQucG9wLmJpbmQodCk7Zm9yKG49MTtuPHJhbmdlLmxlbmd0aDtuKyspe3ZhciB1PXJhbmdlW25dO3QucHVzaCgxPT11P28oKXxvKCk6Mj09dT9vKCkmbygpOnU/c2F0aXNmeSh1LHZlcnNpb24pOiFvKCkpfXJldHVybiEhbygpO1xufVxudmFyIGVuc3VyZUV4aXN0ZW5jZSA9IChzY29wZU5hbWUsIGtleSkgPT4ge1xuXHR2YXIgc2NvcGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLlNbc2NvcGVOYW1lXTtcblx0aWYoIXNjb3BlIHx8ICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oc2NvcGUsIGtleSkpIHRocm93IG5ldyBFcnJvcihcIlNoYXJlZCBtb2R1bGUgXCIgKyBrZXkgKyBcIiBkb2Vzbid0IGV4aXN0IGluIHNoYXJlZCBzY29wZSBcIiArIHNjb3BlTmFtZSk7XG5cdHJldHVybiBzY29wZTtcbn07XG52YXIgZmluZFZlcnNpb24gPSAoc2NvcGUsIGtleSkgPT4ge1xuXHR2YXIgdmVyc2lvbnMgPSBzY29wZVtrZXldO1xuXHR2YXIga2V5ID0gT2JqZWN0LmtleXModmVyc2lvbnMpLnJlZHVjZSgoYSwgYikgPT4ge1xuXHRcdHJldHVybiAhYSB8fCB2ZXJzaW9uTHQoYSwgYikgPyBiIDogYTtcblx0fSwgMCk7XG5cdHJldHVybiBrZXkgJiYgdmVyc2lvbnNba2V5XVxufTtcbnZhciBmaW5kU2luZ2xldG9uVmVyc2lvbktleSA9IChzY29wZSwga2V5KSA9PiB7XG5cdHZhciB2ZXJzaW9ucyA9IHNjb3BlW2tleV07XG5cdHJldHVybiBPYmplY3Qua2V5cyh2ZXJzaW9ucykucmVkdWNlKChhLCBiKSA9PiB7XG5cdFx0cmV0dXJuICFhIHx8ICghdmVyc2lvbnNbYV0ubG9hZGVkICYmIHZlcnNpb25MdChhLCBiKSkgPyBiIDogYTtcblx0fSwgMCk7XG59O1xudmFyIGdldEludmFsaWRTaW5nbGV0b25WZXJzaW9uTWVzc2FnZSA9IChzY29wZSwga2V5LCB2ZXJzaW9uLCByZXF1aXJlZFZlcnNpb24pID0+IHtcblx0cmV0dXJuIFwiVW5zYXRpc2ZpZWQgdmVyc2lvbiBcIiArIHZlcnNpb24gKyBcIiBmcm9tIFwiICsgKHZlcnNpb24gJiYgc2NvcGVba2V5XVt2ZXJzaW9uXS5mcm9tKSArIFwiIG9mIHNoYXJlZCBzaW5nbGV0b24gbW9kdWxlIFwiICsga2V5ICsgXCIgKHJlcXVpcmVkIFwiICsgcmFuZ2VUb1N0cmluZyhyZXF1aXJlZFZlcnNpb24pICsgXCIpXCJcbn07XG52YXIgZ2V0U2luZ2xldG9uID0gKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKSA9PiB7XG5cdHZhciB2ZXJzaW9uID0gZmluZFNpbmdsZXRvblZlcnNpb25LZXkoc2NvcGUsIGtleSk7XG5cdHJldHVybiBnZXQoc2NvcGVba2V5XVt2ZXJzaW9uXSk7XG59O1xudmFyIGdldFNpbmdsZXRvblZlcnNpb24gPSAoc2NvcGUsIHNjb3BlTmFtZSwga2V5LCByZXF1aXJlZFZlcnNpb24pID0+IHtcblx0dmFyIHZlcnNpb24gPSBmaW5kU2luZ2xldG9uVmVyc2lvbktleShzY29wZSwga2V5KTtcblx0aWYgKCFzYXRpc2Z5KHJlcXVpcmVkVmVyc2lvbiwgdmVyc2lvbikpIHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUud2FybiAmJiBjb25zb2xlLndhcm4oZ2V0SW52YWxpZFNpbmdsZXRvblZlcnNpb25NZXNzYWdlKHNjb3BlLCBrZXksIHZlcnNpb24sIHJlcXVpcmVkVmVyc2lvbikpO1xuXHRyZXR1cm4gZ2V0KHNjb3BlW2tleV1bdmVyc2lvbl0pO1xufTtcbnZhciBnZXRTdHJpY3RTaW5nbGV0b25WZXJzaW9uID0gKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKSA9PiB7XG5cdHZhciB2ZXJzaW9uID0gZmluZFNpbmdsZXRvblZlcnNpb25LZXkoc2NvcGUsIGtleSk7XG5cdGlmICghc2F0aXNmeShyZXF1aXJlZFZlcnNpb24sIHZlcnNpb24pKSB0aHJvdyBuZXcgRXJyb3IoZ2V0SW52YWxpZFNpbmdsZXRvblZlcnNpb25NZXNzYWdlKHNjb3BlLCBrZXksIHZlcnNpb24sIHJlcXVpcmVkVmVyc2lvbikpO1xuXHRyZXR1cm4gZ2V0KHNjb3BlW2tleV1bdmVyc2lvbl0pO1xufTtcbnZhciBmaW5kVmFsaWRWZXJzaW9uID0gKHNjb3BlLCBrZXksIHJlcXVpcmVkVmVyc2lvbikgPT4ge1xuXHR2YXIgdmVyc2lvbnMgPSBzY29wZVtrZXldO1xuXHR2YXIga2V5ID0gT2JqZWN0LmtleXModmVyc2lvbnMpLnJlZHVjZSgoYSwgYikgPT4ge1xuXHRcdGlmICghc2F0aXNmeShyZXF1aXJlZFZlcnNpb24sIGIpKSByZXR1cm4gYTtcblx0XHRyZXR1cm4gIWEgfHwgdmVyc2lvbkx0KGEsIGIpID8gYiA6IGE7XG5cdH0sIDApO1xuXHRyZXR1cm4ga2V5ICYmIHZlcnNpb25zW2tleV1cbn07XG52YXIgZ2V0SW52YWxpZFZlcnNpb25NZXNzYWdlID0gKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKSA9PiB7XG5cdHZhciB2ZXJzaW9ucyA9IHNjb3BlW2tleV07XG5cdHJldHVybiBcIk5vIHNhdGlzZnlpbmcgdmVyc2lvbiAoXCIgKyByYW5nZVRvU3RyaW5nKHJlcXVpcmVkVmVyc2lvbikgKyBcIikgb2Ygc2hhcmVkIG1vZHVsZSBcIiArIGtleSArIFwiIGZvdW5kIGluIHNoYXJlZCBzY29wZSBcIiArIHNjb3BlTmFtZSArIFwiLlxcblwiICtcblx0XHRcIkF2YWlsYWJsZSB2ZXJzaW9uczogXCIgKyBPYmplY3Qua2V5cyh2ZXJzaW9ucykubWFwKChrZXkpID0+IHtcblx0XHRyZXR1cm4ga2V5ICsgXCIgZnJvbSBcIiArIHZlcnNpb25zW2tleV0uZnJvbTtcblx0fSkuam9pbihcIiwgXCIpO1xufTtcbnZhciBnZXRWYWxpZFZlcnNpb24gPSAoc2NvcGUsIHNjb3BlTmFtZSwga2V5LCByZXF1aXJlZFZlcnNpb24pID0+IHtcblx0dmFyIGVudHJ5ID0gZmluZFZhbGlkVmVyc2lvbihzY29wZSwga2V5LCByZXF1aXJlZFZlcnNpb24pO1xuXHRpZihlbnRyeSkgcmV0dXJuIGdldChlbnRyeSk7XG5cdHRocm93IG5ldyBFcnJvcihnZXRJbnZhbGlkVmVyc2lvbk1lc3NhZ2Uoc2NvcGUsIHNjb3BlTmFtZSwga2V5LCByZXF1aXJlZFZlcnNpb24pKTtcbn07XG52YXIgd2FybkludmFsaWRWZXJzaW9uID0gKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKSA9PiB7XG5cdHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUud2FybiAmJiBjb25zb2xlLndhcm4oZ2V0SW52YWxpZFZlcnNpb25NZXNzYWdlKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKSk7XG59O1xudmFyIGdldCA9IChlbnRyeSkgPT4ge1xuXHRlbnRyeS5sb2FkZWQgPSAxO1xuXHRyZXR1cm4gZW50cnkuZ2V0KClcbn07XG52YXIgaW5pdCA9IChmbikgPT4gKGZ1bmN0aW9uKHNjb3BlTmFtZSwgYSwgYiwgYykge1xuXHR2YXIgcHJvbWlzZSA9IF9fd2VicGFja19yZXF1aXJlX18uSShzY29wZU5hbWUpO1xuXHRpZiAocHJvbWlzZSAmJiBwcm9taXNlLnRoZW4pIHJldHVybiBwcm9taXNlLnRoZW4oZm4uYmluZChmbiwgc2NvcGVOYW1lLCBfX3dlYnBhY2tfcmVxdWlyZV9fLlNbc2NvcGVOYW1lXSwgYSwgYiwgYykpO1xuXHRyZXR1cm4gZm4oc2NvcGVOYW1lLCBfX3dlYnBhY2tfcmVxdWlyZV9fLlNbc2NvcGVOYW1lXSwgYSwgYiwgYyk7XG59KTtcblxudmFyIGxvYWQgPSAvKiNfX1BVUkVfXyovIGluaXQoKHNjb3BlTmFtZSwgc2NvcGUsIGtleSkgPT4ge1xuXHRlbnN1cmVFeGlzdGVuY2Uoc2NvcGVOYW1lLCBrZXkpO1xuXHRyZXR1cm4gZ2V0KGZpbmRWZXJzaW9uKHNjb3BlLCBrZXkpKTtcbn0pO1xudmFyIGxvYWRGYWxsYmFjayA9IC8qI19fUFVSRV9fKi8gaW5pdCgoc2NvcGVOYW1lLCBzY29wZSwga2V5LCBmYWxsYmFjaykgPT4ge1xuXHRyZXR1cm4gc2NvcGUgJiYgX193ZWJwYWNrX3JlcXVpcmVfXy5vKHNjb3BlLCBrZXkpID8gZ2V0KGZpbmRWZXJzaW9uKHNjb3BlLCBrZXkpKSA6IGZhbGxiYWNrKCk7XG59KTtcbnZhciBsb2FkVmVyc2lvbkNoZWNrID0gLyojX19QVVJFX18qLyBpbml0KChzY29wZU5hbWUsIHNjb3BlLCBrZXksIHZlcnNpb24pID0+IHtcblx0ZW5zdXJlRXhpc3RlbmNlKHNjb3BlTmFtZSwga2V5KTtcblx0cmV0dXJuIGdldChmaW5kVmFsaWRWZXJzaW9uKHNjb3BlLCBrZXksIHZlcnNpb24pIHx8IHdhcm5JbnZhbGlkVmVyc2lvbihzY29wZSwgc2NvcGVOYW1lLCBrZXksIHZlcnNpb24pIHx8IGZpbmRWZXJzaW9uKHNjb3BlLCBrZXkpKTtcbn0pO1xudmFyIGxvYWRTaW5nbGV0b24gPSAvKiNfX1BVUkVfXyovIGluaXQoKHNjb3BlTmFtZSwgc2NvcGUsIGtleSkgPT4ge1xuXHRlbnN1cmVFeGlzdGVuY2Uoc2NvcGVOYW1lLCBrZXkpO1xuXHRyZXR1cm4gZ2V0U2luZ2xldG9uKHNjb3BlLCBzY29wZU5hbWUsIGtleSk7XG59KTtcbnZhciBsb2FkU2luZ2xldG9uVmVyc2lvbkNoZWNrID0gLyojX19QVVJFX18qLyBpbml0KChzY29wZU5hbWUsIHNjb3BlLCBrZXksIHZlcnNpb24pID0+IHtcblx0ZW5zdXJlRXhpc3RlbmNlKHNjb3BlTmFtZSwga2V5KTtcblx0cmV0dXJuIGdldFNpbmdsZXRvblZlcnNpb24oc2NvcGUsIHNjb3BlTmFtZSwga2V5LCB2ZXJzaW9uKTtcbn0pO1xudmFyIGxvYWRTdHJpY3RWZXJzaW9uQ2hlY2sgPSAvKiNfX1BVUkVfXyovIGluaXQoKHNjb3BlTmFtZSwgc2NvcGUsIGtleSwgdmVyc2lvbikgPT4ge1xuXHRlbnN1cmVFeGlzdGVuY2Uoc2NvcGVOYW1lLCBrZXkpO1xuXHRyZXR1cm4gZ2V0VmFsaWRWZXJzaW9uKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgdmVyc2lvbik7XG59KTtcbnZhciBsb2FkU3RyaWN0U2luZ2xldG9uVmVyc2lvbkNoZWNrID0gLyojX19QVVJFX18qLyBpbml0KChzY29wZU5hbWUsIHNjb3BlLCBrZXksIHZlcnNpb24pID0+IHtcblx0ZW5zdXJlRXhpc3RlbmNlKHNjb3BlTmFtZSwga2V5KTtcblx0cmV0dXJuIGdldFN0cmljdFNpbmdsZXRvblZlcnNpb24oc2NvcGUsIHNjb3BlTmFtZSwga2V5LCB2ZXJzaW9uKTtcbn0pO1xudmFyIGxvYWRWZXJzaW9uQ2hlY2tGYWxsYmFjayA9IC8qI19fUFVSRV9fKi8gaW5pdCgoc2NvcGVOYW1lLCBzY29wZSwga2V5LCB2ZXJzaW9uLCBmYWxsYmFjaykgPT4ge1xuXHRpZighc2NvcGUgfHwgIV9fd2VicGFja19yZXF1aXJlX18ubyhzY29wZSwga2V5KSkgcmV0dXJuIGZhbGxiYWNrKCk7XG5cdHJldHVybiBnZXQoZmluZFZhbGlkVmVyc2lvbihzY29wZSwga2V5LCB2ZXJzaW9uKSB8fCB3YXJuSW52YWxpZFZlcnNpb24oc2NvcGUsIHNjb3BlTmFtZSwga2V5LCB2ZXJzaW9uKSB8fCBmaW5kVmVyc2lvbihzY29wZSwga2V5KSk7XG59KTtcbnZhciBsb2FkU2luZ2xldG9uRmFsbGJhY2sgPSAvKiNfX1BVUkVfXyovIGluaXQoKHNjb3BlTmFtZSwgc2NvcGUsIGtleSwgZmFsbGJhY2spID0+IHtcblx0aWYoIXNjb3BlIHx8ICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oc2NvcGUsIGtleSkpIHJldHVybiBmYWxsYmFjaygpO1xuXHRyZXR1cm4gZ2V0U2luZ2xldG9uKHNjb3BlLCBzY29wZU5hbWUsIGtleSk7XG59KTtcbnZhciBsb2FkU2luZ2xldG9uVmVyc2lvbkNoZWNrRmFsbGJhY2sgPSAvKiNfX1BVUkVfXyovIGluaXQoKHNjb3BlTmFtZSwgc2NvcGUsIGtleSwgdmVyc2lvbiwgZmFsbGJhY2spID0+IHtcblx0aWYoIXNjb3BlIHx8ICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oc2NvcGUsIGtleSkpIHJldHVybiBmYWxsYmFjaygpO1xuXHRyZXR1cm4gZ2V0U2luZ2xldG9uVmVyc2lvbihzY29wZSwgc2NvcGVOYW1lLCBrZXksIHZlcnNpb24pO1xufSk7XG52YXIgbG9hZFN0cmljdFZlcnNpb25DaGVja0ZhbGxiYWNrID0gLyojX19QVVJFX18qLyBpbml0KChzY29wZU5hbWUsIHNjb3BlLCBrZXksIHZlcnNpb24sIGZhbGxiYWNrKSA9PiB7XG5cdHZhciBlbnRyeSA9IHNjb3BlICYmIF9fd2VicGFja19yZXF1aXJlX18ubyhzY29wZSwga2V5KSAmJiBmaW5kVmFsaWRWZXJzaW9uKHNjb3BlLCBrZXksIHZlcnNpb24pO1xuXHRyZXR1cm4gZW50cnkgPyBnZXQoZW50cnkpIDogZmFsbGJhY2soKTtcbn0pO1xudmFyIGxvYWRTdHJpY3RTaW5nbGV0b25WZXJzaW9uQ2hlY2tGYWxsYmFjayA9IC8qI19fUFVSRV9fKi8gaW5pdCgoc2NvcGVOYW1lLCBzY29wZSwga2V5LCB2ZXJzaW9uLCBmYWxsYmFjaykgPT4ge1xuXHRpZighc2NvcGUgfHwgIV9fd2VicGFja19yZXF1aXJlX18ubyhzY29wZSwga2V5KSkgcmV0dXJuIGZhbGxiYWNrKCk7XG5cdHJldHVybiBnZXRTdHJpY3RTaW5nbGV0b25WZXJzaW9uKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgdmVyc2lvbik7XG59KTtcbnZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG52YXIgbW9kdWxlVG9IYW5kbGVyTWFwcGluZyA9IHtcblx0MzQzOiAoKSA9PiAobG9hZFNpbmdsZXRvblZlcnNpb25DaGVja0ZhbGxiYWNrKFwiZGVmYXVsdFwiLCBcImphc29uLW1mZS1saWJcIiwgWzMsMCwwLDEsLFwiYWxwaGEwXCJdLCAoKSA9PiAoKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oNjE0KSkpKSlcbn07XG52YXIgaW5pdGlhbENvbnN1bWVzID0gWzM0M107XG5pbml0aWFsQ29uc3VtZXMuZm9yRWFjaCgoaWQpID0+IHtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW2lkXSA9IChtb2R1bGUpID0+IHtcblx0XHQvLyBIYW5kbGUgY2FzZSB3aGVuIG1vZHVsZSBpcyB1c2VkIHN5bmNcblx0XHRpbnN0YWxsZWRNb2R1bGVzW2lkXSA9IDA7XG5cdFx0ZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uY1tpZF07XG5cdFx0dmFyIGZhY3RvcnkgPSBtb2R1bGVUb0hhbmRsZXJNYXBwaW5nW2lkXSgpO1xuXHRcdGlmKHR5cGVvZiBmYWN0b3J5ICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcIlNoYXJlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZSBmb3IgZWFnZXIgY29uc3VtcHRpb246IFwiICsgaWQpO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9XG59KTtcbi8vIG5vIGNodW5rIGxvYWRpbmcgb2YgY29uc3VtZXMiLCJ2YXIgcj1mdW5jdGlvbihyLHQpe3JldHVybiByK3R9O2V4cG9ydHtyIGFzIGRlZmF1bHR9O1xuIiwiaW1wb3J0IHN1bSBmcm9tICdqYXNvbi1tZmUtbGliJ1xuXG5jb25zdCByZW1vdGVDb21wb25lbnQgPSAoKSA9PiB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIGVsZW1lbnQuc3JjID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMi9yZW1vdGVFbnRyeS5qcyc7XG4gICAgZWxlbWVudC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgZWxlbWVudC5hc3luYyA9IHRydWU7XG4gICAgZWxlbWVudC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgbG9hZCByZW1vdGUgZXJyb3JgKVxuICAgIH07XG4gICAgZWxlbWVudC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBsb2FkIHJlbW90ZSBmaW5pc2hlZGApO1xuICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgX193ZWJwYWNrX2luaXRfc2hhcmluZ19fKCdkZWZhdWx0Jyk7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB3aW5kb3dbJ3JlbW90ZUFwcCddOyAvLyBvciBnZXQgdGhlIGNvbnRhaW5lciBzb21ld2hlcmUgZWxzZVxuICAgICAgICAgICAgYXdhaXQgY29udGFpbmVyLmluaXQoX193ZWJwYWNrX3NoYXJlX3Njb3Blc19fLmRlZmF1bHQpO1xuICAgICAgICAgICAgY29uc3QgZmFjdG9yeSA9IGF3YWl0IHdpbmRvd1sncmVtb3RlQXBwJ10uZ2V0KCcuL1dpZGdldCcpO1xuICAgICAgICAgICAgZmFjdG9yeSgpO1xuICAgICAgICB9KSgpXG5cbiAgICB9O1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudCgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3QgX3N1bSA9IHN1bSgyLCAyKTtcblxuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gWydIZWxsbycsICd0aGlzJywgJ2lzJywgJ2hvc3QnLCAnYXBwJ10uam9pbignICcpICsgJyAnICsgX3N1bTtcblxuICAgIHJldHVybiBlbGVtZW50O1xufVxuXG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbXBvbmVudCgpKTtcblxuXG4vLyBsb2FkIHJlbW90ZSBhcHBcblxucmVtb3RlQ29tcG9uZW50KClcblxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4vLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLlMgPSB7fTtcbnZhciBpbml0UHJvbWlzZXMgPSB7fTtcbnZhciBpbml0VG9rZW5zID0ge307XG5fX3dlYnBhY2tfcmVxdWlyZV9fLkkgPSAobmFtZSwgaW5pdFNjb3BlKSA9PiB7XG5cdGlmKCFpbml0U2NvcGUpIGluaXRTY29wZSA9IFtdO1xuXHQvLyBoYW5kbGluZyBjaXJjdWxhciBpbml0IGNhbGxzXG5cdHZhciBpbml0VG9rZW4gPSBpbml0VG9rZW5zW25hbWVdO1xuXHRpZighaW5pdFRva2VuKSBpbml0VG9rZW4gPSBpbml0VG9rZW5zW25hbWVdID0ge307XG5cdGlmKGluaXRTY29wZS5pbmRleE9mKGluaXRUb2tlbikgPj0gMCkgcmV0dXJuO1xuXHRpbml0U2NvcGUucHVzaChpbml0VG9rZW4pO1xuXHQvLyBvbmx5IHJ1bnMgb25jZVxuXHRpZihpbml0UHJvbWlzZXNbbmFtZV0pIHJldHVybiBpbml0UHJvbWlzZXNbbmFtZV07XG5cdC8vIGNyZWF0ZXMgYSBuZXcgc2hhcmUgc2NvcGUgaWYgbmVlZGVkXG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oX193ZWJwYWNrX3JlcXVpcmVfXy5TLCBuYW1lKSkgX193ZWJwYWNrX3JlcXVpcmVfXy5TW25hbWVdID0ge307XG5cdC8vIHJ1bnMgYWxsIGluaXQgc25pcHBldHMgZnJvbSBhbGwgbW9kdWxlcyByZWFjaGFibGVcblx0dmFyIHNjb3BlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5TW25hbWVdO1xuXHR2YXIgd2FybiA9IChtc2cpID0+ICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4gJiYgY29uc29sZS53YXJuKG1zZykpO1xuXHR2YXIgdW5pcXVlTmFtZSA9IFwiQG1mZS1zdHVkeS9ob3N0QXBwXCI7XG5cdHZhciByZWdpc3RlciA9IChuYW1lLCB2ZXJzaW9uLCBmYWN0b3J5LCBlYWdlcikgPT4ge1xuXHRcdHZhciB2ZXJzaW9ucyA9IHNjb3BlW25hbWVdID0gc2NvcGVbbmFtZV0gfHwge307XG5cdFx0dmFyIGFjdGl2ZVZlcnNpb24gPSB2ZXJzaW9uc1t2ZXJzaW9uXTtcblx0XHRpZighYWN0aXZlVmVyc2lvbiB8fCAoIWFjdGl2ZVZlcnNpb24ubG9hZGVkICYmICghZWFnZXIgIT0gIWFjdGl2ZVZlcnNpb24uZWFnZXIgPyBlYWdlciA6IHVuaXF1ZU5hbWUgPiBhY3RpdmVWZXJzaW9uLmZyb20pKSkgdmVyc2lvbnNbdmVyc2lvbl0gPSB7IGdldDogZmFjdG9yeSwgZnJvbTogdW5pcXVlTmFtZSwgZWFnZXI6ICEhZWFnZXIgfTtcblx0fTtcblx0dmFyIGluaXRFeHRlcm5hbCA9IChpZCkgPT4ge1xuXHRcdHZhciBoYW5kbGVFcnJvciA9IChlcnIpID0+ICh3YXJuKFwiSW5pdGlhbGl6YXRpb24gb2Ygc2hhcmluZyBleHRlcm5hbCBmYWlsZWQ6IFwiICsgZXJyKSk7XG5cdFx0dHJ5IHtcblx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcblx0XHRcdGlmKCFtb2R1bGUpIHJldHVybjtcblx0XHRcdHZhciBpbml0Rm4gPSAobW9kdWxlKSA9PiAobW9kdWxlICYmIG1vZHVsZS5pbml0ICYmIG1vZHVsZS5pbml0KF9fd2VicGFja19yZXF1aXJlX18uU1tuYW1lXSwgaW5pdFNjb3BlKSlcblx0XHRcdGlmKG1vZHVsZS50aGVuKSByZXR1cm4gcHJvbWlzZXMucHVzaChtb2R1bGUudGhlbihpbml0Rm4sIGhhbmRsZUVycm9yKSk7XG5cdFx0XHR2YXIgaW5pdFJlc3VsdCA9IGluaXRGbihtb2R1bGUpO1xuXHRcdFx0aWYoaW5pdFJlc3VsdCAmJiBpbml0UmVzdWx0LnRoZW4pIHJldHVybiBwcm9taXNlcy5wdXNoKGluaXRSZXN1bHRbJ2NhdGNoJ10oaGFuZGxlRXJyb3IpKTtcblx0XHR9IGNhdGNoKGVycikgeyBoYW5kbGVFcnJvcihlcnIpOyB9XG5cdH1cblx0dmFyIHByb21pc2VzID0gW107XG5cdHN3aXRjaChuYW1lKSB7XG5cdFx0Y2FzZSBcImRlZmF1bHRcIjoge1xuXHRcdFx0cmVnaXN0ZXIoXCJqYXNvbi1tZmUtbGliXCIsIFwiMC4wLjEtYWxwaGEwXCIsICgpID0+ICgoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg2MTQpKSksIDEpO1xuXHRcdH1cblx0XHRicmVhaztcblx0fVxuXHRpZighcHJvbWlzZXMubGVuZ3RoKSByZXR1cm4gaW5pdFByb21pc2VzW25hbWVdID0gMTtcblx0cmV0dXJuIGluaXRQcm9taXNlc1tuYW1lXSA9IFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCgpID0+IChpbml0UHJvbWlzZXNbbmFtZV0gPSAxKSk7XG59OyIsIi8vIG1vZHVsZSBjYWNoZSBhcmUgdXNlZCBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTM4KTtcbiJdLCJuYW1lcyI6WyJwYXJzZVZlcnNpb24iLCJ2ZXJzaW9uTHQiLCJyYW5nZVRvU3RyaW5nIiwic2F0aXNmeSIsImZpbmRTaW5nbGV0b25WZXJzaW9uS2V5IiwiZ2V0SW52YWxpZFNpbmdsZXRvblZlcnNpb25NZXNzYWdlIiwiZ2V0U2luZ2xldG9uVmVyc2lvbiIsImdldCIsImxvYWRTaW5nbGV0b25WZXJzaW9uQ2hlY2tGYWxsYmFjayIsImluc3RhbGxlZE1vZHVsZXMiLCJtb2R1bGVUb0hhbmRsZXJNYXBwaW5nIiwiciIsInQiLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiX3N1bSIsImlubmVySFRNTCIsImpvaW4iLCJjb21wb25lbnQiLCJzcmMiLCJ0eXBlIiwiYXN5bmMiLCJvbmVycm9yIiwiY29uc29sZSIsImxvZyIsIm9ubG9hZCIsImNvbnRhaW5lciIsIndpbmRvdyIsImluaXQiLCJkZWZhdWx0IiwiaGVhZCIsInJlbW90ZUNvbXBvbmVudCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsImMiLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsIlMiLCJpbml0UHJvbWlzZXMiLCJpbml0VG9rZW5zIiwiSSIsIm5hbWUiLCJpbml0U2NvcGUiLCJpbml0VG9rZW4iLCJpbmRleE9mIiwicHVzaCIsInNjb3BlIiwidW5pcXVlTmFtZSIsInByb21pc2VzIiwidmVyc2lvbiIsImZhY3RvcnkiLCJlYWdlciIsInZlcnNpb25zIiwiYWN0aXZlVmVyc2lvbiIsImxvYWRlZCIsImZyb20iLCJyZWdpc3RlciIsImxlbmd0aCIsIlByb21pc2UiLCJhbGwiLCJ0aGVuIiwic3RyIiwicCIsInNwbGl0IiwibWFwIiwiZXhlYyIsImFwcGx5IiwiYiIsImUiLCJmIiwicmFuZ2UiLCJnIiwicG9wIiwicmVwbGFjZSIsImkiLCJzIiwiYmluZCIsInUiLCJrZXlzIiwicmVkdWNlIiwicmVxdWlyZWRWZXJzaW9uIiwic2NvcGVOYW1lIiwid2FybiIsImVudHJ5IiwiZm4iLCJwcm9taXNlIiwiZmFsbGJhY2siLCJmb3JFYWNoIiwiaWQiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=